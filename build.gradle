buildscript {
    ext['dependencyPluginVersion'] = '0.6.0.RELEASE'
    ext['springCloudVersion'] = 'Brixton.RELEASE'
    ext['springBootVersion'] = '1.3.5.RELEASE'
    ext['springVersion'] = '4.2.5.RELEASE'
    ext['gradleDockerVersion'] = '1.2'
    ext['junitVersion'] = '4.10'
    ext['embedMongoVersion'] = '1.50.0'
    ext['restAssuredVersion'] = '2.9.0'
    ext['guavaVersion'] = '18.0'
    ext['commonsLangVersion'] = '3.4'
    ext['slf4jVersion'] = '1.7.12'
    ext['logbackVersion'] = '1.1.7'

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${dependencyPluginVersion}"
        classpath("se.transmode.gradle:gradle-docker:${gradleDockerVersion}")
        classpath("org.owasp.esapi:esapi:2.0.1")
    }

}

group = 'ing-direct'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'docker'
apply plugin: 'io.spring.dependency-management'

jar {
    group = 'ing-direct'
    baseName = 'customer-analytics'
    version =  '1.0'
    manifest {
        attributes 'Main-Class': 'com.ing.direct.Application'
    }
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
    compile.exclude module : 'spring-boot-starter-logging'
//    all*.exclude group: 'ch.qos.logback', module: 'logback-core'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    // spring boot
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-hateoas")
    compile("org.springframework.boot:spring-boot-starter-undertow")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-data-mongodb")
    compile("org.springframework.boot:spring-boot-starter-cache")

    // spring cloud
    compile 'org.springframework.cloud:spring-cloud-starter-hystrix'
    compile 'org.springframework.cloud:spring-cloud-starter-eureka'

    // springfox/swagger
    // TODO: how to integration with swagger library
//    compile "io.springfox:springfox-swagger2"
//    compile "io.springfox:springfox-swagger-ui"
//    testCompile "io.github.robwin:swagger2markup:0.9.2"

    // guava
    compile("com.google.guava:guava:${guavaVersion}")

    // logging
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "ch.qos.logback:logback-classic:${logbackVersion}"

    // apache commons lang
    compile "org.apache.commons:commons-lang3:${commonsLangVersion}"

//    // embedded mongodb
    compile "de.flapdoodle.embed:de.flapdoodle.embed.mongo:${embedMongoVersion}"

    // jackson datatype
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

    // owasp
    compile("org.owasp.esapi:esapi:2.0.1")

    // unit testing
    testCompile 'org.slf4j:jcl-over-slf4j:1.7.12'
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile("com.jayway.jsonpath:json-path")
    testCompile("com.jayway.jsonpath:json-path-assert")
    testCompile "com.jayway.restassured:spring-mock-mvc:${restAssuredVersion}"
    testCompile("junit:junit:${junitVersion}")
}

bootRun {
    addResources = true
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.3.1'
}

task buildDocker(type: Docker, dependsOn: build) {
    push = false
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    def waitForScript = file('src/main/docker/wait-for-it.sh')
    doFirst {
        copy {
            from jar
            into stageDir
        }
        copy {
            from waitForScript
            into stageDir
        }
    }
}
